Tasarım desenleri arasında creational grubuna ait en popüler desendir. Uluslar arası standartlarda %80 kullanım oranına sahip bir desendir. Esas amacı her daim nesnenin kullanım süresi boyunca bir nesnenin sadece bir kez oluşturulmasını ve oluşturulan bu nesnenin defalarca faklı konumlarada kullanılmasını sağlamaktır.

Bu desenin ana fikri bir nesne örneğinden sadece bir kere üretilip, o nesnenin örnekleminin her zaman kullanılmasını önermektedir. Örneğin katmanlı mimaride katmanlar arasnda bir nesne örnekleminin ilgili katmanlar arasında geçerken sadece işlem yapıyorsa yani üzeirnde bir değeri tutmak gibi bir görebi yoksa singleton ile üretilebilir. Somut bir örnek vermek gerekirse Business katmanında tutulabilecek ve CRUD operasyonlarında kullanılabilinecek bir nesne örneklemine ihtiyaç duyulduğunda ilgili nesne singleton ile üretilebilinir. Bir nesnenin durumunun kontrol edilmesini temin etmektedir. Örneğin nesne üretininde nesnenin kendi içeriisnde birlirli şartlar koşmak istediğimizde de kullanabiliriz.

Ne zaman kullanmamalıyım, singleton ile nesne ürettiğimizde bu ürettiğimiz nesne her zaman RAM'in heap alanında ISS restart edilinceye kadar yaşar buda bizim için maliyetli demektir.

Singleton ile nesne üretirken kendimize şu soruyu sormalıyız. Ben singleton ile nesne ürettiğimde bu nesneyi çok farklı biçimlerde kullanacakmıyım ve ne sıklıkla kullanacağım. Birinci sorunun cevabı evet ise üretememeliyiz. Nedenyi yukarıdaki paragrafta. İkinci soruya gelecek olursak üretmeliyiz. Örneğin ay sonunda maaş bordolarını hesaplamak için kullanılan bir sınıfımız var ve bu sınıf sadece muhassebe biriminden bir kişinin attığı talep sonucunda tetikleniyor. Bu senaryoda bu sınıfın instancesi singleton ile üretmemeliyiz.

Bir başka mekanizmaya kontrollü bir biçimde erşimek istediğimizde, kontrol kapsamında singleton ile yaratabiliriz. Bu işlem muhakkak concrete sınıfın içerisinde gerçekleşmelidir. Bu desen sınıfın yanlızca bir kez başlatılmasını ve tüm isteklerin bu nesne üzerinden yönlendirilmesi prensibine dayandığı için singleton deseninde instancesi alınan sınıftan yararlanan diğer sınıflar değil, sınıfın kendisi kısıtlamaların sağlanmasından sorumludur.